; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\NUC029xDE\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.BasicTimer_TIMER3_Init||, CODE, READONLY, ALIGN=2

                  BasicTimer_TIMER3_Init PROC
;;;86     
;;;87     void BasicTimer_TIMER3_Init(void)
000000  b510              PUSH     {r4,lr}
;;;88     {
;;;89         TIMER_Open(TIMER3, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L1.44|
000004  227d              MOVS     r2,#0x7d
000006  2101              MOVS     r1,#1
000008  00d2              LSLS     r2,r2,#3
00000a  06c9              LSLS     r1,r1,#27
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  0621              LSLS     r1,r4,#24
000016  4308              ORRS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
00001a  1488              ASRS     r0,r1,#18
00001c  4904              LDR      r1,|L1.48|
00001e  6008              STR      r0,[r1,#0]
000020  6820              LDR      r0,[r4,#0]
000022  0589              LSLS     r1,r1,#22
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
;;;90         TIMER_EnableInt(TIMER3);
;;;91         NVIC_EnableIRQ(TMR3_IRQn);	
;;;92         TIMER_Start(TIMER3);
;;;93     }
000028  bd10              POP      {r4,pc}
;;;94     
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      0x40110020
                  |L1.48|
                          DCD      0xe000e100

                          AREA ||i.GPAB_IRQHandler||, CODE, READONLY, ALIGN=2

                  GPAB_IRQHandler PROC
;;;94     
;;;95     void GPAB_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;96     {
;;;97         /* To check if PB.3 interrupt occurred */
;;;98         if(GPIO_GET_INT_FLAG(PB, BIT3))
000002  480e              LDR      r0,|L2.60|
000004  6a01              LDR      r1,[r0,#0x20]
000006  0709              LSLS     r1,r1,#28
000008  d50d              BPL      |L2.38|
;;;99         {
;;;100            GPIO_CLR_INT_FLAG(PB, BIT3);
00000a  2108              MOVS     r1,#8
00000c  6201              STR      r1,[r0,#0x20]
;;;101    //        printf("PB.3 INT occurred.\n");
;;;102    
;;;103    		DUTY_LED = 0;
00000e  480c              LDR      r0,|L2.64|
000010  2300              MOVS     r3,#0
000012  7003              STRB     r3,[r0,#0]
;;;104    		FLAG_LED = 1;
000014  2101              MOVS     r1,#1
000016  7041              STRB     r1,[r0,#1]
;;;105     		CNT_LED = 0;
000018  7083              STRB     r3,[r0,#2]
;;;106    		PWM_ConfigOutputChannel(PWM0, 0, 20000, DUTY_LED);		
00001a  4a0a              LDR      r2,|L2.68|
00001c  4619              MOV      r1,r3
00001e  480a              LDR      r0,|L2.72|
000020  f7fffffe          BL       PWM_ConfigOutputChannel
;;;107        }
;;;108        else
;;;109        {
;;;110            /* Un-expected interrupt. Just clear all PA, PB interrupts */
;;;111            PA->ISRC = PA->ISRC;
;;;112            PB->ISRC = PB->ISRC;
;;;113            printf("Un-expected interrupts.\n");
;;;114        }
;;;115    }
000024  bd10              POP      {r4,pc}
                  |L2.38|
000026  4905              LDR      r1,|L2.60|
000028  3940              SUBS     r1,r1,#0x40           ;111
00002a  6a0a              LDR      r2,[r1,#0x20]         ;111
00002c  620a              STR      r2,[r1,#0x20]         ;111
00002e  6a01              LDR      r1,[r0,#0x20]         ;112
000030  6201              STR      r1,[r0,#0x20]         ;112
000032  a006              ADR      r0,|L2.76|
000034  f7fffffe          BL       __2printf
000038  bd10              POP      {r4,pc}
;;;116    
                          ENDP

00003a  0000              DCW      0x0000
                  |L2.60|
                          DCD      0x50004040
                  |L2.64|
                          DCD      ||.data||
                  |L2.68|
                          DCD      0x00004e20
                  |L2.72|
                          DCD      0x40040000
                  |L2.76|
00004c  556e2d65          DCB      "Un-expected interrupts.\n",0
000050  78706563
000054  74656420
000058  696e7465
00005c  72727570
000060  74732e0a
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;116    
;;;117    void GPIO_Init(void)
000000  b510              PUSH     {r4,lr}
;;;118    {
;;;119        GPIO_SetMode(PA, BIT12, GPIO_PMD_OUTPUT);	//led TEST
000002  2201              MOVS     r2,#1
000004  0311              LSLS     r1,r2,#12
000006  480f              LDR      r0,|L3.68|
000008  f7fffffe          BL       GPIO_SetMode
;;;120    	PA12 = 0;
00000c  490e              LDR      r1,|L3.72|
00000e  2000              MOVS     r0,#0
000010  6308              STR      r0,[r1,#0x30]
;;;121    
;;;122        GPIO_SetMode(PB, BIT3, GPIO_PMD_INPUT);
000012  4c0c              LDR      r4,|L3.68|
000014  4602              MOV      r2,r0
000016  3440              ADDS     r4,r4,#0x40
000018  2108              MOVS     r1,#8
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       GPIO_SetMode
;;;123    	GPIO_EnableInt(PB, 3, GPIO_INT_FALLING);
000020  2201              MOVS     r2,#1
000022  2103              MOVS     r1,#3
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       GPIO_EnableInt
00002a  4808              LDR      r0,|L3.76|
00002c  2110              MOVS     r1,#0x10
00002e  6001              STR      r1,[r0,#0]
;;;124        NVIC_EnableIRQ(GPAB_IRQn);
;;;125    	
;;;126        GPIO_SET_DEBOUNCE_TIME(GPIO_DBCLKSRC_HCLK, GPIO_DBCLKSEL_1024);
000030  4905              LDR      r1,|L3.72|
000032  202a              MOVS     r0,#0x2a
000034  3980              SUBS     r1,r1,#0x80
000036  6008              STR      r0,[r1,#0]
;;;127        GPIO_ENABLE_DEBOUNCE(PB, BIT3);	
000038  6961              LDR      r1,[r4,#0x14]
00003a  2008              MOVS     r0,#8
00003c  4301              ORRS     r1,r1,r0
00003e  6161              STR      r1,[r4,#0x14]
;;;128    	
;;;129    }
000040  bd10              POP      {r4,pc}
;;;130    
                          ENDP

000042  0000              DCW      0x0000
                  |L3.68|
                          DCD      0x50004000
                  |L3.72|
                          DCD      0x50004200
                  |L3.76|
                          DCD      0xe000e100

                          AREA ||i.PWM0_CH0_Init||, CODE, READONLY, ALIGN=2

                  PWM0_CH0_Init PROC
;;;29     
;;;30     void PWM0_CH0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;31     {
;;;32         SYS->GPA_MFP &= ~(SYS_GPA_MFP_PA12_Msk);
000002  2005              MOVS     r0,#5
000004  0700              LSLS     r0,r0,#28
000006  6b02              LDR      r2,[r0,#0x30]
000008  2101              MOVS     r1,#1
00000a  0309              LSLS     r1,r1,#12
00000c  438a              BICS     r2,r2,r1
00000e  6302              STR      r2,[r0,#0x30]
;;;33         SYS->GPA_MFP |= SYS_GPA_MFP_PA12_PWM0_CH0;
000010  6b02              LDR      r2,[r0,#0x30]
000012  430a              ORRS     r2,r2,r1
000014  6302              STR      r2,[r0,#0x30]
;;;34     
;;;35     
;;;36         PWM_ConfigOutputChannel(PWM0, 0, 20000, 0);
000016  4c09              LDR      r4,|L4.60|
000018  2300              MOVS     r3,#0
00001a  4a07              LDR      r2,|L4.56|
00001c  4619              MOV      r1,r3
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       PWM_ConfigOutputChannel
;;;37         PWM_EnableOutput(PWM0, PWM_CH_0_MASK);
000024  2101              MOVS     r1,#1
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       PWM_EnableOutput
;;;38     
;;;39         /* Start PWM module */
;;;40         PWM_Start(PWM0, PWM_CH_0_MASK);
00002c  2101              MOVS     r1,#1
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       PWM_Start
;;;41     
;;;42     }
000034  bd10              POP      {r4,pc}
;;;43     
                          ENDP

000036  0000              DCW      0x0000
                  |L4.56|
                          DCD      0x00004e20
                  |L4.60|
                          DCD      0x40040000

                          AREA ||i.TMR3_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  TMR3_IRQHandler PROC
;;;43     
;;;44     void TMR3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
000002  481e              LDR      r0,|L5.124|
000004  6881              LDR      r1,[r0,#8]
000006  07c9              LSLS     r1,r1,#31
000008  0fc9              LSRS     r1,r1,#31
;;;45     {
00000a  d035              BEQ      |L5.120|
00000c  2601              MOVS     r6,#1
00000e  6086              STR      r6,[r0,#8]
;;;46     	static uint32_t LOG = 0;
;;;47     	static uint16_t CNT = 0;
;;;48     
;;;49         if(TIMER_GetIntFlag(TIMER3) == 1)
;;;50         {
;;;51             TIMER_ClearIntFlag(TIMER3);
;;;52     
;;;53     		if (PB3 ==1)
000010  481b              LDR      r0,|L5.128|
000012  68c0              LDR      r0,[r0,#0xc]
000014  2500              MOVS     r5,#0
;;;54     		{
;;;55     			if (CNT_LED++ >= 18)
000016  4c1b              LDR      r4,|L5.132|
000018  2801              CMP      r0,#1                 ;53
00001a  d11e              BNE      |L5.90|
00001c  78a0              LDRB     r0,[r4,#2]  ; CNT_LED
00001e  1c41              ADDS     r1,r0,#1
000020  70a1              STRB     r1,[r4,#2]
000022  2812              CMP      r0,#0x12
000024  d319              BCC      |L5.90|
;;;56     			{		
;;;57     				CNT_LED = 0;
000026  70a5              STRB     r5,[r4,#2]
;;;58     				PWM_ConfigOutputChannel(PWM0, 0, 20000, DUTY_LED);
000028  7823              LDRB     r3,[r4,#0]  ; DUTY_LED
00002a  4a17              LDR      r2,|L5.136|
00002c  2100              MOVS     r1,#0
00002e  4817              LDR      r0,|L5.140|
000030  f7fffffe          BL       PWM_ConfigOutputChannel
;;;59     //				printf("DUTY : %4d\r\n" ,DUTY_LED );
;;;60     				if (FLAG_LED)
000034  7860              LDRB     r0,[r4,#1]  ; FLAG_LED
000036  2800              CMP      r0,#0
;;;61     				{
;;;62     					if ( ++DUTY_LED == 100)
;;;63     					{
;;;64     						FLAG_LED = 0;
;;;65     						DUTY_LED = 100;
;;;66     					}
;;;67     				}
;;;68     				else
;;;69     				{
;;;70     					if ( --DUTY_LED == 0)
000038  7820              LDRB     r0,[r4,#0]  ; DUTY_LED
00003a  d007              BEQ      |L5.76|
00003c  1c40              ADDS     r0,r0,#1              ;60
00003e  b2c0              UXTB     r0,r0                 ;62
000040  7020              STRB     r0,[r4,#0]            ;62
000042  2864              CMP      r0,#0x64              ;62
000044  d109              BNE      |L5.90|
000046  7065              STRB     r5,[r4,#1]            ;64
000048  7020              STRB     r0,[r4,#0]            ;65
00004a  e006              B        |L5.90|
                  |L5.76|
00004c  1e40              SUBS     r0,r0,#1              ;65
00004e  0600              LSLS     r0,r0,#24
000050  0e00              LSRS     r0,r0,#24
000052  7020              STRB     r0,[r4,#0]
000054  d101              BNE      |L5.90|
;;;71     					{
;;;72     						FLAG_LED = 1;
000056  7066              STRB     r6,[r4,#1]
;;;73     						DUTY_LED = 0;
000058  7025              STRB     r5,[r4,#0]
                  |L5.90|
;;;74     					}			
;;;75     				}
;;;76     			}
;;;77     		}
;;;78     
;;;79     		if (CNT++ >= 1000)
00005a  88a0              LDRH     r0,[r4,#4]  ; CNT
00005c  1c41              ADDS     r1,r0,#1
00005e  80a1              STRH     r1,[r4,#4]
000060  217d              MOVS     r1,#0x7d
000062  00c9              LSLS     r1,r1,#3
000064  4288              CMP      r0,r1
000066  d307              BCC      |L5.120|
;;;80     		{		
;;;81     			CNT = 0;
000068  80a5              STRH     r5,[r4,#4]
;;;82             	printf("%s : %4d\r\n",__FUNCTION__,LOG++);
00006a  68a2              LDR      r2,[r4,#8]  ; LOG
00006c  4908              LDR      r1,|L5.144|
00006e  1c50              ADDS     r0,r2,#1
000070  60a0              STR      r0,[r4,#8]  ; LOG
000072  a008              ADR      r0,|L5.148|
000074  f7fffffe          BL       __2printf
                  |L5.120|
;;;83     		}
;;;84         }
;;;85     }
000078  bd70              POP      {r4-r6,pc}
;;;86     
                          ENDP

00007a  0000              DCW      0x0000
                  |L5.124|
                          DCD      0x40110020
                  |L5.128|
                          DCD      0x50004240
                  |L5.132|
                          DCD      ||.data||
                  |L5.136|
                          DCD      0x00004e20
                  |L5.140|
                          DCD      0x40040000
                  |L5.144|
                          DCD      ||.constdata||
                  |L5.148|
000094  2573203a          DCB      "%s : %4d\r\n",0
000098  20253464
00009c  0d0a00  
00009f  00                DCB      0

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;131    
;;;132    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;133    {
;;;134        /* Set GPB multi-function pins for UART0 RXD and TXD */
;;;135        SYS->GPB_MFP &= ~(SYS_GPB_MFP_PB0_Msk | SYS_GPB_MFP_PB1_Msk);
000002  2005              MOVS     r0,#5
000004  0700              LSLS     r0,r0,#28
000006  6b41              LDR      r1,[r0,#0x34]
000008  0889              LSRS     r1,r1,#2
00000a  0089              LSLS     r1,r1,#2
00000c  6341              STR      r1,[r0,#0x34]
;;;136        SYS->GPB_MFP |= (SYS_GPB_MFP_PB0_UART0_RXD | SYS_GPB_MFP_PB1_UART0_TXD);
00000e  6b41              LDR      r1,[r0,#0x34]
000010  2203              MOVS     r2,#3
000012  4311              ORRS     r1,r1,r2
000014  6341              STR      r1,[r0,#0x34]
;;;137    
;;;138        SYS_ResetModule(UART0_RST);
000016  4813              LDR      r0,|L6.100|
000018  f7fffffe          BL       SYS_ResetModule
;;;139    
;;;140        /* Configure UART0 and set UART0 baud rate */
;;;141        UART_Open(UART0, 115200);
00001c  4c12              LDR      r4,|L6.104|
00001e  21e1              MOVS     r1,#0xe1
000020  0249              LSLS     r1,r1,#9
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       UART_Open
;;;142    
;;;143    	/* Set UART receive time-out */
;;;144    	UART_SetTimeoutCnt(UART0, 20);
000028  2114              MOVS     r1,#0x14
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       UART_SetTimeoutCnt
;;;145    
;;;146    	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
000030  f7fffffe          BL       CLK_GetCPUFreq
000034  4601              MOV      r1,r0
000036  a00d              ADR      r0,|L6.108|
000038  f7fffffe          BL       __2printf
;;;147    	printf("CLK_GetHCLKFreq : %8d\r\n",CLK_GetHCLKFreq());	
00003c  f7fffffe          BL       CLK_GetHCLKFreq
000040  4601              MOV      r1,r0
000042  a011              ADR      r0,|L6.136|
000044  f7fffffe          BL       __2printf
;;;148    	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetHXTFreq());
000048  f7fffffe          BL       CLK_GetHXTFreq
00004c  4601              MOV      r1,r0
00004e  a014              ADR      r0,|L6.160|
000050  f7fffffe          BL       __2printf
;;;149    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLKFreq());
000054  f7fffffe          BL       CLK_GetPCLKFreq
000058  4601              MOV      r1,r0
00005a  a018              ADR      r0,|L6.188|
00005c  f7fffffe          BL       __2printf
;;;150    
;;;151    	
;;;152    }
000060  bd10              POP      {r4,pc}
;;;153    
                          ENDP

000062  0000              DCW      0x0000
                  |L6.100|
                          DCD      0x04000010
                  |L6.104|
                          DCD      0x40050000
                  |L6.108|
00006c  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
000070  4b5f4765
000074  74435055
000078  46726571
00007c  203a2025
000080  38640d0a
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L6.136|
000088  434c4b5f          DCB      "CLK_GetHCLKFreq : %8d\r\n",0
00008c  47657448
000090  434c4b46
000094  72657120
000098  3a202538
00009c  640d0a00
                  |L6.160|
0000a0  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000a4  47657450
0000a8  434c4b30
0000ac  46726571
0000b0  203a2025
0000b4  38640d0a
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L6.188|
0000bc  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0000c0  47657450
0000c4  434c4b31
0000c8  46726571
0000cc  203a2025
0000d0  38640d0a
0000d4  00      
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;153    
;;;154    int main()
000000  f7fffffe          BL       SYS_Init
;;;155    {
;;;156        SYS_Init();
;;;157    
;;;158        UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;159    
;;;160    	GPIO_Init();
000008  f7fffffe          BL       GPIO_Init
;;;161    
;;;162        TIMER_Delay(TIMER3, 1000000);
00000c  4c07              LDR      r4,|L7.44|
00000e  4d08              LDR      r5,|L7.48|
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       TIMER_Delay
;;;163        TIMER_Delay(TIMER3, 1000000);
000018  4621              MOV      r1,r4
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       TIMER_Delay
;;;164    
;;;165    	PWM0_CH0_Init();
000020  f7fffffe          BL       PWM0_CH0_Init
;;;166    			
;;;167    	BasicTimer_TIMER3_Init();
000024  f7fffffe          BL       BasicTimer_TIMER3_Init
                  |L7.40|
;;;168    
;;;169        while(1)
000028  e7fe              B        |L7.40|
;;;170        {
;;;171    
;;;172        }
;;;173    }
;;;174    
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      0x000f4240
                  |L7.48|
                          DCD      0x40110020

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  544d5233          DCB      0x54,0x4d,0x52,0x33
000004  5f495251          DCB      0x5f,0x49,0x52,0x51
000008  48616e64          DCB      0x48,0x61,0x6e,0x64
00000c  6c657200          DCB      0x6c,0x65,0x72,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  DUTY_LED
000000  00                DCB      0x00
                  FLAG_LED
000001  01                DCB      0x01
                  CNT_LED
000002  0000              DCB      0x00,0x00
                  ||CNT||
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  LOG
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_DUTY_LED____REV16|
#line 118 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_DUTY_LED____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_DUTY_LED____REVSH|
#line 132
|__asm___6_main_c_DUTY_LED____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
